:encoding: UTF-8
// The markup language of this document is AsciiDoc

= The EF Programming Language
:author: Florian Kaufmann and Elias Diem
:revdate: January 2015

https://github.com/sensorflo/EF[The EF Programming Language] (C) by Florian
Kaufmann <sensorflo@gmail.com> and Elias Diem <pub@webconect.ch> is licensed
under a http://creativecommons.org/licenses/by-sa/4.0/[Creative Commons
Attribution-ShareAlike 4.0 International License]

The purpose of this document currently is to have a vehicle to conduct
brainstorming.

[[motivation_abstract]]
== Motivation for a new programming language

For embedded systems or regular operating systems with rather tough run-time
efficiency constrains, IMO there is currently no general purpose programming
language which offers most of the abstraction and convenience features of
modern and classic programming languages and has a relatively simple syntax
and rules.  More on EF's motivation in <<motivation_details>>.

== Vision

A general purpose programming language, biased towards system programming and
embedded hard real-time environments in the industry.  Competitor to
C&plus;&plus;, Ada, Real-Time Java.

- Multi-paradigm 
- Nearly pure OO language, nearly everything is an object, nearly every type
  is a class
- Functional programming
- Generic programming
- Meta programming
- Based on expressions; no statements.  Thus much less constraints where
  certain constructs, e.g. definition of functions, classes, objects etc can
  occur.
- Collections (e.g. lists or maps aka dictionaries) and operations (e.g
  slicing) on them are first class citizen.
- Static typed, type inference, whether strong or weak typing I don't know yet
- Compile time execution: many things can be computed at compile-time opposed
  to run-time
- Exceptions.
- Contracts (as in D)
- Interfaces as in Java, no multiple inheritance as in C&plus;&plus;.
- Manual memory management, but by default smart pointers are used, probably
  no garbage collector due to its impact on hard real-time constraints.
- Supply safe-easy-to-use primitives such as pointers, arrays, strings,
  collections in general etc, which are nearly are as efficient as their C
  counterparts.  That includes having literals of those.
- Low level code in the spirit of C still possible, but one has to use
  explicit language constructs to use these, so when reading code it's
  apparent when they are used.
- Easy enough grammar, so compilers and additional tools like static code
  analysis, semantic aware IDEs etc are easy enough to write.  Only if good
  development tools are available for EF it will also be used in the industry.

// more details in ./doc/ef.txt
