// The markup language of this document is AsciiDoc
:encoding: UTF-8

= The EF Programming Language
Florian Kaufmann <sensorflo@gmail.com>
April 2014

https://github.com/sensorflo/EF[The EF Programming Language] (C) by Florian
Kaufmann is licensed under a
http://creativecommons.org/licenses/by-sa/4.0/[Creative Commons
Attribution-ShareAlike 4.0 International License]

This document is currently only in brainstorming quality

== Rational for a new programming language

For embedded systems or regular operating systems with rather tough run-time
efficiency constrains there is no, to my current knowledge, programming
language which has simple consistent syntax (C++ is out since due to legacy
the syntax has become very difficult in the detail), is statically typed and
offers many the convenience of modern scripting languages like java / ruby /
python such as OO, functional programmming, generic programming, collections,
as first class citizens.

== Goal / Mission / Vision
A modern programming language usable in an embedded, real-time environment in
the industry. Competitor to C++.

- Multi-paradigm -- the user has to know in which situation which paradigm is
  the best to use
- Nearly pure OO language, nearly everything is an object, nearly every type
  is a class
- Functional programming
- Generic programming
- Based on expressions, no statements. Thus much less constraints where
  certain constructs, e.g. definition of functions, classes, objects etc can
  occur.
- Collections (e.g. lists or maps aka dictionaries) and operations (e.g
  slicing) on them are first class citizen.
- Static type checking, i.e. no duck typing, but optionally RTTI
- Compile time execution: many things can be computed at compile-time opposed
  to run-time
- Exceptions
- Contracts (as in D)
- Proper/easier interfaces, no multiple inheritance
- Manual memory management, but by default smart pointers are used, no garbage
  collector.
- Supply safe-easy-to-use primitives such as pointers, arrays, strings,
  collections in general etc, which are nearly are as efficient as their C
  counterparts. That includes having literals of those
- Low level code as in C still possible if the above is not efficient after
  all for certain program parts
- Easy enough grammar, so compilers and additional tools like static code
  analysis, semantic aware IDEs etc are easy enough to write. Only if good
  development tools are available for EF it will also be used in the industry.

== Current state

I just begun brainstorming beginning in April 2014, trying out a lot of
things, writing the syntax, and so far I am more than pleased with the result.
I really think it's more than just a crazy idea. Until I wrote an first
implementation of EF via an llvm front end I decided to encrypt my current
work. I am happy to give you the key if you're honestly interested in helping
evolving EF.
