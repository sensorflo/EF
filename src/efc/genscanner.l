/* flex definitions section
----------------------------------------------------------------------*/
%option noyywrap nounput batch noinput 8bit full

%{
  #include "../scanner.h"
  #include "../driver.h"
  #include "../parser.h"
  #include <cerrno>
  #include <climits>
  #include <cfloat>
  #include <cstdlib>
  #include <string>

 // Work around an incompatibility in flex (at least versions
 // 2.5.31 through 2.5.33): it generates code that does
 // not conform to C89.  See Debian bug 333231
 // <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
 #undef yywrap
 #define yywrap() 1

 // an action which is always executed prior to the matched rule's action
 #define YY_USER_ACTION  loc.columns(yyleng);

 /* yylex_raw is the free function of the lex family of function which's
 definition is generated by flex. See also yylex and the class Scanner */
 #define YY_DECL Parser::symbol_type yylex_raw(Driver& driver)

 using namespace std;
 using namespace yy;
 Location loc;
 void yyinitializeParserLoc(string* filename) {
   loc.initialize(filename);
 }

 int charCount(const char*, char ch);
%}

  /* identifier */
ID [a-zA-Z_][a-zA-Z_0-9]*

/* rules section
----------------------------------------------------------------------*/
%%

  // code which is to be executed whenever the scanning routine is entered
%{
  loc.step();
%}

  /* comments and blanks. They are all skiped and thus produce no token. */
\/\/[^\n]*          loc.step();
#![^\n]*            loc.step();
\/\*[^*]*(\*+[^#*]+)*\*+\/  loc.step(); loc.lines(charCount(yytext, '\n'));
[ \t]+              loc.step();
[\n]+               loc.lines(yyleng); loc.step(); return Parser::make_NEWLINE(loc);
\\[ \t]*((\/\/|#!)[^\n]*)?\n		loc.lines(1); loc.step();

  /* non-type keywords */
if\(                return Parser::make_IF_LPAREN(loc);
if                  return Parser::make_IF(loc);
then                return Parser::make_THEN(loc);
elif                return Parser::make_ELIF(loc);
else                return Parser::make_ELSE(loc);
while\(             return Parser::make_WHILE_LPAREN(loc);
while               return Parser::make_WHILE(loc);
do                  return Parser::make_DO(loc);
fun\(               return Parser::make_FUN_LPAREN(loc);
fun                 return Parser::make_FUN(loc);
val\(               return Parser::make_VAL_LPAREN(loc);
val                 return Parser::make_VAL(loc);
var\(               return Parser::make_VAR_LPAREN(loc);
var                 return Parser::make_VAR(loc);
end                 return Parser::make_END(loc);
endof               return Parser::make_ENDOF(loc);
not                 return Parser::make_NOT(loc);
and                 return Parser::make_AND(loc);
or                  return Parser::make_OR(loc);
raw_new\(           return Parser::make_RAW_NEW_LPAREN(loc);
raw_new             return Parser::make_RAW_NEW(loc);
raw_delete\(        return Parser::make_RAW_DELETE_LPAREN(loc);
raw_delete          return Parser::make_RAW_DELETE(loc);
nop                 return Parser::make_NOP(loc);
return\(            return Parser::make_RETURN_LPAREN(loc);
return              return Parser::make_RETURN(loc);
mut                 return Parser::make_MUT(loc);
is                  return Parser::make_IS(loc);
static              return Parser::make_STATIC(loc);
local               return Parser::make_LOCAL(loc);
noinit              return Parser::make_NOINIT(loc);


  /* type keywords */
void                return Parser::make_FUNDAMENTAL_TYPE(ObjTypeFunda::eVoid, loc);
char                return Parser::make_FUNDAMENTAL_TYPE(ObjTypeFunda::eChar, loc);
int                 return Parser::make_FUNDAMENTAL_TYPE(ObjTypeFunda::eInt, loc);
bool                return Parser::make_FUNDAMENTAL_TYPE(ObjTypeFunda::eBool, loc);
double              return Parser::make_FUNDAMENTAL_TYPE(ObjTypeFunda::eDouble, loc);
infer               return Parser::make_FUNDAMENTAL_TYPE(ObjTypeFunda::eInfer, loc);


  /* literal bool */
false               return Parser::make_NUMBER(NumberToken(0, ObjTypeFunda::eBool), loc);
true                return Parser::make_NUMBER(NumberToken(1, ObjTypeFunda::eBool), loc);


  /* literal char */
'.'                 return Parser::make_NUMBER(NumberToken(yytext[1], ObjTypeFunda::eChar), loc);


  /* literal integral / floatingpoint number  */
[0-9]+(\.[0-9]+)?{ID}?  {
  errno = 0;
  char* suffix = nullptr;
  bool containsDot = (nullptr != strchr(yytext, '.'));
  long double number = strtold(yytext, &suffix);
  ObjTypeFunda::EType objType = ObjTypeFunda::eVoid;

  if (errno) {
    driver.exitInternError(loc, string("Scanner's rule"
     "matched a number, but strtol doesn't recognize a number. ") +
     strerror(errno));

  // currently no suffixes are recognized
  } else if (*suffix!='\0') {
    driver.error(loc, string("Unknown literal number suffix: ") + suffix);
  }

  // it's an floating point literal
  else if (containsDot) {
    if (number<DBL_MIN || number>DBL_MAX) {
      number = number<DBL_MIN ? DBL_MIN : DBL_MAX;
      driver.error(loc, "Numeric literal to big");
    }
    objType = ObjTypeFunda::eDouble;
  }

  // it's an integral literal
  else {
    if (number<INT_MIN || number>INT_MAX) {
      number = number<INT_MIN ? INT_MIN : INT_MAX;
      driver.error(loc, "Numeric literal to big");
    }
    objType = ObjTypeFunda::eInt;
  }
  return Parser::make_NUMBER(
    NumberToken(static_cast<GeneralValue>(number), objType), loc);
}

  /* punctuation */
":="                return Parser::make_COLON_EQUAL(loc);
"->"                return Parser::make_ARROW(loc);
"&&"                return Parser::make_AMPER_AMPER(loc);
"||"                return Parser::make_PIPE_PIPE(loc);
"=="                return Parser::make_EQUAL_EQUAL(loc);
"=<"                return Parser::make_EQUAL_LESS(loc);
"(="                return Parser::make_LPAREN_EQUAL(loc);
op([-+*/!]|&&|"||"|"=="|"_and"|"_or"|"_not"|"_new"|"_delete") {
  char* start = yytext + 2;     // skip "op"
  if (*start == '_') ++start;   // skip '_'
  return Parser::make_OP_NAME(start, loc);
}

";"                 return Parser::make_SEMICOLON(loc);
"$"                 return Parser::make_DOLLAR(loc);
":"                 return Parser::make_COLON(loc);
","                 return Parser::make_COMMA(loc);
"+"                 return Parser::make_PLUS(loc);
"-"                 return Parser::make_MINUS(loc);
"*"                 return Parser::make_STAR(loc);
"&"                 return Parser::make_AMPER(loc);
"/"                 return Parser::make_SLASH(loc);
"!"                 return Parser::make_EXCL(loc);
"="                 return Parser::make_EQUAL(loc);
"("                 return Parser::make_LPAREN(loc);
")"                 return Parser::make_RPAREN(loc);
"{"                 return Parser::make_LBRACE(loc);
"}"                 return Parser::make_RBRACE(loc);

  /* misc */
{ID}                return Parser::make_ID(yytext, loc);
<<EOF>>             return Parser::make_END_OF_FILE(loc);
.                   driver.error(loc, "invalid character");

%%
/* user code section
----------------------------------------------------------------------*/
Scanner::Scanner(Driver& driver) :
  m_driver(driver) {
}

Parser::symbol_type Scanner::pop() {
  return yylex_raw(m_driver);
}

int charCount(const char* p, char ch) {
  int cnt = 0;
  for ( /*nop*/; *p!='\0'; ++p) {
    if (*p==ch) {
      ++cnt;
    }
  }
  return cnt;
}
